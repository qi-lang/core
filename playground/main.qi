# atom
:ok
:_ok_
:_123_ok_123

# string
"Hello, World ðŸ˜Š"
"#{123 + 2}"

# bool
    true
    false

# number
    1024
    3.1415

# operations
    100 + 20 + 1
    1.0 + 2 - 3
    (2 * 3.14) / 20
    "a" ++ "b"

    [1, 2, 3] ++ [4, 5, 6]
    [1, 2, 3] -- [1, 2]

    true && false
    false && !true
    !!true

    true and false
    false and not true
    not (not true)

    12.3
    |> Math.ceil()
    |> Math.pow(2)
    |> IO.puts()

# module
    module A do

    end

# function
    def hello(name \\ "World") do
      "Hello, #{name}"
    end

    def add(x, y) do
      x + y
    end

# lambda
    fn x -> x end
    fn x, y -> x * y end
    fn (a, b) -> a + b end

# selection
    if is_true? do
    end

    if x > y do
      x
    else
      y
    end

    cond do
      x > y -> x
      _ -> y
    end

    case x do
      1 or 2 or 3 -> "x is either 1 or 2 or 3"
      _ -> "x is literally anything else"
    end

# iteration

    # produces a list of x + 1 e.g. [2, 3, 4]
    for x <- [1, 2, 3] do
      yield x + 1
    end

    # produces a list of tuples e.g. [{1, "a"}, {2. "b"}, {3, "c"}]
    for x <- [1,2,3,4], y <- ["a", "b", "c"] do
      yield {x, y}
    end

# struct

    struct User do
      name: ""
      age: 0
    end

    impl User do
      def __new__(name, age) do
        User %{name, age}
      end

      def can_drive? do
        true
      end
    end

    a_user = User::new("Zana", 22)
    a_user.can_drive?()
    |> IO.puts()

# javascript embed

    ecma CodeBlock do

    end

    CodeBlock::__init__()
